// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCard = `-- name: CreateCard :one
INSERT INTO cards (
  owner_id, type, number, exp_date, cvv, balance
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, owner_id, type, number, exp_date, cvv, balance, created_at, updated_at
`

type CreateCardParams struct {
	OwnerID int64
	Type    string
	Number  string
	ExpDate pgtype.Date
	Cvv     string
	Balance pgtype.Numeric
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (Card, error) {
	row := q.db.QueryRow(ctx, createCard,
		arg.OwnerID,
		arg.Type,
		arg.Number,
		arg.ExpDate,
		arg.Cvv,
		arg.Balance,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Type,
		&i.Number,
		&i.ExpDate,
		&i.Cvv,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, role
) VALUES (
  $1, $2
)
RETURNING id, name, role
`

type CreateUserParams struct {
	Name string
	Role pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Role)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Role)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getCard = `-- name: GetCard :one
SELECT id, owner_id, type, number, exp_date, cvv, balance, created_at, updated_at FROM cards
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCard(ctx context.Context, id int64) (Card, error) {
	row := q.db.QueryRow(ctx, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Type,
		&i.Number,
		&i.ExpDate,
		&i.Cvv,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, role FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Role)
	return i, err
}

const listCards = `-- name: ListCards :many
SELECT id, owner_id, type, number, exp_date, cvv, balance, created_at, updated_at FROM cards
WHERE owner_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListCards(ctx context.Context, ownerID int64) ([]Card, error) {
	rows, err := q.db.Query(ctx, listCards, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Type,
			&i.Number,
			&i.ExpDate,
			&i.Cvv,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, role FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set name = $2,
  role = $3
WHERE id = $1
RETURNING id, name, role
`

type UpdateUserParams struct {
	ID   int64
	Name string
	Role pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Name, arg.Role)
	return err
}
